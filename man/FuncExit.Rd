% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expobiolink.R, R/expocros.R, R/expodb.R,
%   R/expomedt.R, R/expometa.R, R/expomix.R, R/expomo.R, R/exponta.R,
%   R/expopanel.R, R/expostat.R, R/expostatlink.R, R/exposurv.R, R/expotidy.R,
%   R/expoviz.R
\name{FuncExit}
\alias{FuncExit}
\title{End the module analysis}
\usage{
FuncExit(PID)

FuncExit(PID)

FuncExit(PID)

FuncExit(PID)

FuncExit(PID)

FuncExit(PID)

FuncExit(PID)

FuncExit(PID)

FuncExit(PID)

FuncExit(PID)

FuncExit(PID)

FuncExit(PID)

FuncExit(PID)

FuncExit(PID)
}
\arguments{
\item{PID}{chr. Program ID. It must be the same with the PID generated by InitViz}
}
\value{
Exit status

Exit status

Exit status

Exit status

Exit status

Exit status

Exit status

Exit status

Exit status

Exit status

Exit status
}
\description{
End the module analysis

End the module analysis

End the module analysis

End the module analysis

End the module analysis

End the module analysis

End the module analysis

End the module analysis

End the module analysis

End the analysis

End the module analysis

End the module analysis

End the module analysis

End the module analysis
}
\examples{
res = InitBioLink()
   res = LoadBioLink(PID = res$PID,UseExample = "example#1")
   res2 = ConvToExpoID(PID = res$PID)
   FuncExit(PID = res$PID)
res = InitCros()
   res1 = LoadCros(PID = res$PID,UseExample = "example#1")
   FuncExit(PID = res$PID)
res = InitBioLink()
   res = LoadBioLink(PID = res$PID,UseExample = "example#1")
   res2 = ConvToExpoID(PID = res$PID)
   FuncExit(PID = res$PID)
res <- InitMedt()
   res1 <- LoadMedt(PID = res$PID, UseExample = "example#1", DataPath = NULL,
   VocaPath = NULL)
   res2 <- XMlists(PID = res$PID)
   FuncExit(PID = res$PID)
res = InitMeta()
   res1 = LoadMeta(PID = res$PID,
   UseExample = "example#1",
   DataPath = NULL)
   res2 = MetaEffect(PID=res$PID,
   OutPath = "default",
   CID = "default",
   DID = "default")
   FuncExit(PID = res$PID)
res = InitBioLink()
   res = LoadBioLink(PID = res$PID,UseExample = "example#1")
   res2 = ConvToExpoID(PID = res$PID)
   FuncExit(PID = res$PID)
res <- InitMo()
   res <- LoadMO(PID=res$PID, UseExample = "example#1", DataPath = NULL, VocaPath = NULL)
   res2 <- MulOmicsCros(PID=res$PID, OutPath ="default", OmicGroups = "immunome,metabolome,proteome",
   VarsY = "Y1", VarsC = "all.c", TuneMethod = "random_search", TuneNum = 5, RsmpMethod = "cv", Folds = 5,
   Ratio = 0.67, Repeats = 5, VarsImpThr = 0.85, SG_Lrns ="lasso,enet,rf,xgboost")
   res3 <- VizMultOmic(PID=res$PID, OutPath = "default", VarsY = "Y1", NodeNum=100, EdgeThr= 0.45,
   Layout = "force-directed", Brightness = "light", Palette = 'default1')
   FuncExit(PID = res$PID)
res = InitBioLink()
   res = LoadBioLink(PID = res$PID,UseExample = "example#1")
   res2 = ConvToExpoID(PID = res$PID)
   FuncExit(PID = res$PID)
res = InitBioLink()
   res = LoadBioLink(PID = res$PID,UseExample = "example#1")
   res2 = ConvToExpoID(PID = res$PID)
   FuncExit(PID = res$PID)
res = InitStat()
   res1 = LoadStat(PID = res$PID, UseExample = "example#1")
   res2 = StatCorr(PID = res$PID, Group = T, VarsX = "X5,X6,X7,X8,X9", VarsY = "Y1", VarsBy = "Y1", Method = "pearson", Layout = "bubble", Brightness = "dark", Palette = "nature")
   res3 = FuncExit(PID = res$PID)
res = InitBioLink()
   res = LoadBioLink(PID = res$PID,UseExample = "example#1")
   res2 = ConvToExpoID(PID = res$PID)
   FuncExit(PID = res$PID)
res = InitTidy()
   FuncExit(PID = res$PID)
res = InitTidy()
   res1 = LoadTidy(PID=res$PID, UseExample="example#1")
   res2 = DelNearZeroVar(PID=res$PID)
   FuncExit(PID = res$PID)
res = InitViz()
   res1 = LoadViz(PID = res$PID,UseExample = "example#1")
   res2 = VizCateDot(PID=res$PID,OutPath = "default",Group = "F",
   Vars = "X4,X5,X6,X7,X8,X9,X10",Parameter = "mean",
   Brightness = "light",Palette = "default1")
   FuncExit(PID = res$PID)
}
\author{
Bin Wang (corresponding author)

Guohuan Zhang, Yuting Wang, Bin Wang (corresponding author)

Ning Gao,Bin Wang(corresponding author)
}
